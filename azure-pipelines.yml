trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Container Registry (ACR) settings
  acrName: 'myacrferfefd'
  acrResourceGroup: 'rg_testing_terraform'
  acrServiceConnection: 'acr-connection'
  sonarServiceConnection: 'sonar-connection'
  # Azure Kubernetes Service (AKS) settings
  aksCluster: 'testcheck'
  aksServiceConnection: 'aks-connection'

stages:
- stage: Analysis
  jobs:
  - job: AnalysisJob
    displayName: 'Run Analysis'
    steps:
    - checkout: self

    # Run SonarQube analysis
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'sonar-connection'  # Add your SonarQube service connection name

    - task: SonarQubeAnalyze@4

    # Publish Quality Gate Result
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

- stage: PublishQualityGate
  jobs:
  - job: DummyJob
    displayName: 'Dummy Job'
    steps:
    - checkout: self
    - script: echo "This is a dummy job, used to satisfy the stage dependency requirements."

  - job: PublishQualityGateJob
    displayName: 'Publish Quality Gate Result'
    dependsOn: DummyJob
    steps:
    - checkout: self

    # Publish Quality Gate Result
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

- stage: SonarQualityGateCheck
  jobs:
  - job: SonarQualityGateCheckJob
    displayName: 'Sonar Quality Gate Check'
    dependsOn: PublishQualityGate
    steps:
    - checkout: self

    # Run SonarQube quality gate check
    - task: SonarQualityGateCheck
      inputs:
        SonarQube: 'sonar-connection'  # Add your SonarQube service connection name
        projectKey: 'testingsonar123'

- stage: BuildAndPush
  displayName: 'Build and Push to ACR'
  jobs:
  - job: Build
    displayName: 'Build and Push'
    steps:
    - checkout: self
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: '$(AcrServiceConnection)'
        repository: 'testing'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: CopyFiles@2
      displayName: 'Copy Files to: drop'
      inputs:
        SourceFolder: deployment
        Contents: deployment.yaml
        TargetFolder: drop
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: deployment/deployment.yaml

# Uncomment the following section if you want to deploy to AKS
# - stage: DeployToAKS
#   displayName: 'Deploy to AKS'
#   dependsOn: BuildAndPush
#   jobs:
#   - job: Deploy
#     displayName: 'Deploy to AKS'
#     steps:
#     - checkout: self
#     - task: AzureCLI@2
#       displayName: 'Azure CLI Login'
#       inputs:
#         azureSubscription: '$(AcrServiceConnection)'  # Use AzureRM service connection
#         scriptType: 'bash'
#         scriptLocation: 'inline'
#         inlineScript: 'az aks get-credentials --resource-group $(acrResourceGroup) --name $(aksCluster)'

#     - task: KubernetesManifest@0
#       displayName: 'Deploy to AKS'
#       inputs:
#         action: 'deploy'
#         kubernetesServiceConnection: '$(AksServiceConnection)'
#         manifests: '$(Build.SourcesDirectory)/k8s/deployment.yaml'
#         containers: 'my-app-container'  # Replace with your container name
